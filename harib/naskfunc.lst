     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; 오브젝트 파일을 만드는 모드	
     5 00000000                                 [INSTRSET "i486p"]				; 486명령까지 사용하고 싶다고 하는 기술
     6 00000000                                 [BITS 32]					; 32비트 모드용의 기계어를 만들게 한다
     7 00000000                                 [FILE "naskfunc.nas"]				; 원시 파일명 정보
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    15 00000000                                 		GLOBAL	_load_tr
    16 00000000                                 		GLOBAL	_farjmp
    17 00000000                                 		GLOBAL	_asm_inthandler20, _asm_inthandler21
    18 00000000                                 		GLOBAL	_asm_inthandler2c
    19 00000000                                 		GLOBAL	_memtest_sub
    20 00000000                                 		EXTERN	_inthandler20, _inthandler21
    21 00000000                                 		EXTERN	_inthandler2c
    22 00000000                                 
    23 00000000                                 
    24                                          [SECTION .text]
    25 00000000                                 
    26 00000000                                 _io_hlt:	; void io_hlt(void);
    27 00000000 F4                              		HLT
    28 00000001 C3                              		RET
    29 00000002                                 
    30 00000002                                 _io_cli:	; void io_cli(void);
    31 00000002 FA                              		CLI
    32 00000003 C3                              		RET
    33 00000004                                 
    34 00000004                                 _io_sti:	; void io_sti(void);
    35 00000004 FB                              		STI
    36 00000005 C3                              		RET
    37 00000006                                 
    38 00000006                                 _io_stihlt:	; void io_stihlt(void);
    39 00000006 FB                              		STI
    40 00000007 F4                              		HLT
    41 00000008 C3                              		RET
    42 00000009                                 
    43 00000009                                 _io_in8:	; int io_in8(int port);
    44 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    45 0000000D B8 00000000                     		MOV		EAX,0
    46 00000012 EC                              		IN		AL,DX
    47 00000013 C3                              		RET
    48 00000014                                 
    49 00000014                                 _io_in16:	; int io_in16(int port);
    50 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    51 00000018 B8 00000000                     		MOV		EAX,0
    52 0000001D 66 ED                           		IN		AX,DX
    53 0000001F C3                              		RET
    54 00000020                                 
    55 00000020                                 _io_in32:	; int io_in32(int port);
    56 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    57 00000024 ED                              		IN		EAX,DX
    58 00000025 C3                              		RET
    59 00000026                                 
    60 00000026                                 _io_out8:	; void io_out8(int port, int data);
    61 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    62 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    63 0000002E EE                              		OUT		DX,AL
    64 0000002F C3                              		RET
    65 00000030                                 
    66 00000030                                 _io_out16:	; void io_out16(int port, int data);
    67 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    68 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    69 00000038 66 EF                           		OUT		DX,AX
    70 0000003A C3                              		RET
    71 0000003B                                 
    72 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    73 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    74 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    75 00000043 EF                              		OUT		DX,EAX
    76 00000044 C3                              		RET
    77 00000045                                 
    78 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    79 00000045 9C                              		PUSHFD		; PUSH EFLAGS 라고 하는 의미
    80 00000046 58                              		POP		EAX
    81 00000047 C3                              		RET
    82 00000048                                 
    83 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    84 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    85 0000004C 50                              		PUSH	EAX
    86 0000004D 9D                              		POPFD		; POP EFLAGS 라고 하는 의미
    87 0000004E C3                              		RET
    88 0000004F                                 
    89 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    90 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    91 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    92 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    93 0000005E C3                              		RET
    94 0000005F                                 
    95 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    96 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    97 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    98 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    99 0000006E C3                              		RET
   100 0000006F                                 
   101 0000006F                                 _load_cr0:		; int load_cr0(void);
   102 0000006F 0F 20 C0                        		MOV		EAX,CR0
   103 00000072 C3                              		RET
   104 00000073                                 
   105 00000073                                 _store_cr0:		; void store_cr0(int cr0);
   106 00000073 8B 44 24 04                     		MOV		EAX,[ESP+4]
   107 00000077 0F 22 C0                        		MOV		CR0,EAX
   108 0000007A C3                              		RET
   109 0000007B                                 
   110 0000007B                                 _load_tr:		; void load_tr(int tr);
   111 0000007B 0F 00 5C 24 04                  		LTR		[ESP + 4]	;tr
   112 00000080 C3                              		RET
   113 00000081                                 		
   114 00000081                                 _farjmp:		; void farjmp(int eip, int cs);
   115 00000081 FF 6C 24 04                     		JMP		FAR[ESP + 4]		; eip, cs
   116 00000085 C3                              		RET
   117 00000086                                 		
   118 00000086                                 _asm_inthandler21:
   119 00000086 06                              		PUSH	ES
   120 00000087 1E                              		PUSH	DS
   121 00000088 60                              		PUSHAD
   122 00000089 89 E0                           		MOV		EAX,ESP
   123 0000008B 50                              		PUSH	EAX
   124 0000008C 66 8C D0                        		MOV		AX,SS
   125 0000008F 8E D8                           		MOV		DS,AX
   126 00000091 8E C0                           		MOV		ES,AX
   127 00000093 E8 [00000000]                   		CALL	_inthandler21
   128 00000098 58                              		POP		EAX
   129 00000099 61                              		POPAD
   130 0000009A 1F                              		POP		DS
   131 0000009B 07                              		POP		ES
   132 0000009C CF                              		IRETD
   133 0000009D                                 
   134 0000009D                                 _asm_inthandler2c:
   135 0000009D 06                              		PUSH	ES
   136 0000009E 1E                              		PUSH	DS
   137 0000009F 60                              		PUSHAD
   138 000000A0 89 E0                           		MOV		EAX,ESP
   139 000000A2 50                              		PUSH	EAX
   140 000000A3 66 8C D0                        		MOV		AX,SS
   141 000000A6 8E D8                           		MOV		DS,AX
   142 000000A8 8E C0                           		MOV		ES,AX
   143 000000AA E8 [00000000]                   		CALL	_inthandler2c
   144 000000AF 58                              		POP		EAX
   145 000000B0 61                              		POPAD
   146 000000B1 1F                              		POP		DS
   147 000000B2 07                              		POP		ES
   148 000000B3 CF                              		IRETD
   149 000000B4                                 
   150 000000B4                                 _asm_inthandler20:
   151 000000B4 06                              		PUSH	ES
   152 000000B5 1E                              		PUSH	DS
   153 000000B6 60                              		PUSHAD
   154 000000B7 89 E0                           		MOV		EAX, ESP
   155 000000B9 50                              		PUSH	EAX
   156 000000BA 66 8C D0                        		MOV		AX, SS
   157 000000BD 8E D8                           		MOV		DS, AX
   158 000000BF 8E C0                           		MOV		ES, AX
   159 000000C1 E8 [00000000]                   		CALL	_inthandler20
   160 000000C6 58                              		POP		EAX
   161 000000C7 61                              		POPAD
   162 000000C8 1F                              		POP		DS
   163 000000C9 07                              		POP		ES
   164 000000CA CF                              		IRETD
   165 000000CB                                 		
   166 000000CB                                 _memtest_sub:	;unsigned int memtest_sub(unsigned int start, unsigned int end);
   167 000000CB 57                              		PUSH	EDI		; (EBX, ESI, EDI 도 사용하고 싶기 때문에)
   168 000000CC 56                              		PUSH	ESI
   169 000000CD 53                              		PUSH	EBX
   170 000000CE BE AA55AA55                     		MOV		ESI, 0xaa55aa55				; pat0 = 0xaa55aa55;
   171 000000D3 BF 55AA55AA                     		MOV		EDI, 0x55aa55aa				; pat1 = 0x55aa55aa;
   172 000000D8 8B 44 24 10                     		MOV		EAX, [ESP + 12 + 4]			; i = start;
   173 000000DC                                 mts_loop:
   174 000000DC 89 C3                           		MOV		EBX, EAX
   175 000000DE 81 C3 00000FFC                  		ADD		EBX, 0xffc					; p = i + 0xffc;
   176 000000E4 8B 13                           		MOV		EDX, [EBX]					; old = *p;
   177 000000E6 89 33                           		MOV		[EBX], ESI					; *p = pat0;
   178 000000E8 83 33 FF                        		XOR		DWORD [EBX], 0xffffffff		; *p ^= 0xffffffff;
   179 000000EB 3B 3B                           		CMP		EDI, [EBX]					; if (*p != pat1) goto fin;
   180 000000ED 75 18                           		JNE		mts_fin
   181 000000EF 83 33 FF                        		XOR		DWORD [EBX], 0xffffffff		; *p ^= 0xffffffff;
   182 000000F2 3B 33                           		CMP		ESI, [EBX]					; if (*p != pat0) goto fin;
   183 000000F4 75 11                           		JNE		mts_fin
   184 000000F6 89 13                           		MOV		[EBX], EDX					; *p = old;
   185 000000F8 05 00001000                     		ADD		EAX, 0x1000					; i += 0x1000;
   186 000000FD 3B 44 24 14                     		CMP		EAX, [ESP + 12 + 8]			; if (i <= end) goto mts_loop;
   187 00000101 76 D9                           		JBE		mts_loop
   188 00000103 5B                              		POP		EBX
   189 00000104 5E                              		POP		ESI
   190 00000105 5F                              		POP		EDI
   191 00000106 C3                              		RET
   192 00000107                                 mts_fin:
   193 00000107 89 13                           		MOV		[EBX], EDX					; *p = old;
   194 00000109 5B                              		POP		EBX
   195 0000010A 5E                              		POP		ESI
   196 0000010B 5F                              		POP		EDI
   197 0000010C C3                              		RET