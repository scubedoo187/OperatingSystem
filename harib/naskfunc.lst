     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; 오브젝트 파일을 만드는 모드	
     5 00000000                                 [INSTRSET "i486p"]				; 486명령까지 사용하고 싶다고 하는 기술
     6 00000000                                 [BITS 32]					; 32비트 모드용의 기계어를 만들게 한다
     7 00000000                                 [FILE "naskfunc.nas"]				; 원시 파일명 정보
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    15 00000000                                 		GLOBAL	_asm_inthandler21, _asm_inthandler2c
    16 00000000                                 		GLOBAL	_memtest_sub
    17 00000000                                 		EXTERN	_inthandler21, _inthandler2c
    18 00000000                                 
    19 00000000                                 
    20                                          [SECTION .text]
    21 00000000                                 
    22 00000000                                 _io_hlt:	; void io_hlt(void);
    23 00000000 F4                              		HLT
    24 00000001 C3                              		RET
    25 00000002                                 
    26 00000002                                 _io_cli:	; void io_cli(void);
    27 00000002 FA                              		CLI
    28 00000003 C3                              		RET
    29 00000004                                 
    30 00000004                                 _io_sti:	; void io_sti(void);
    31 00000004 FB                              		STI
    32 00000005 C3                              		RET
    33 00000006                                 
    34 00000006                                 _io_stihlt:	; void io_stihlt(void);
    35 00000006 FB                              		STI
    36 00000007 F4                              		HLT
    37 00000008 C3                              		RET
    38 00000009                                 
    39 00000009                                 _io_in8:	; int io_in8(int port);
    40 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    41 0000000D B8 00000000                     		MOV		EAX,0
    42 00000012 EC                              		IN		AL,DX
    43 00000013 C3                              		RET
    44 00000014                                 
    45 00000014                                 _io_in16:	; int io_in16(int port);
    46 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    47 00000018 B8 00000000                     		MOV		EAX,0
    48 0000001D 66 ED                           		IN		AX,DX
    49 0000001F C3                              		RET
    50 00000020                                 
    51 00000020                                 _io_in32:	; int io_in32(int port);
    52 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    53 00000024 ED                              		IN		EAX,DX
    54 00000025 C3                              		RET
    55 00000026                                 
    56 00000026                                 _io_out8:	; void io_out8(int port, int data);
    57 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    58 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    59 0000002E EE                              		OUT		DX,AL
    60 0000002F C3                              		RET
    61 00000030                                 
    62 00000030                                 _io_out16:	; void io_out16(int port, int data);
    63 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    64 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    65 00000038 66 EF                           		OUT		DX,AX
    66 0000003A C3                              		RET
    67 0000003B                                 
    68 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    69 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    70 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    71 00000043 EF                              		OUT		DX,EAX
    72 00000044 C3                              		RET
    73 00000045                                 
    74 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    75 00000045 9C                              		PUSHFD		; PUSH EFLAGS 라고 하는 의미
    76 00000046 58                              		POP		EAX
    77 00000047 C3                              		RET
    78 00000048                                 
    79 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    80 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    81 0000004C 50                              		PUSH	EAX
    82 0000004D 9D                              		POPFD		; POP EFLAGS 라고 하는 의미
    83 0000004E C3                              		RET
    84 0000004F                                 
    85 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    86 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    87 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    88 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    89 0000005E C3                              		RET
    90 0000005F                                 
    91 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    92 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    93 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    94 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    95 0000006E C3                              		RET
    96 0000006F                                 
    97 0000006F                                 _load_cr0:		; int load_cr0(void);
    98 0000006F 0F 20 C0                        		MOV		EAX,CR0
    99 00000072 C3                              		RET
   100 00000073                                 
   101 00000073                                 _store_cr0:		; void store_cr0(int cr0);
   102 00000073 8B 44 24 04                     		MOV		EAX,[ESP+4]
   103 00000077 0F 22 C0                        		MOV		CR0,EAX
   104 0000007A C3                              		RET
   105 0000007B                                 
   106 0000007B                                 _asm_inthandler21:
   107 0000007B 06                              		PUSH	ES
   108 0000007C 1E                              		PUSH	DS
   109 0000007D 60                              		PUSHAD
   110 0000007E 89 E0                           		MOV		EAX,ESP
   111 00000080 50                              		PUSH	EAX
   112 00000081 66 8C D0                        		MOV		AX,SS
   113 00000084 8E D8                           		MOV		DS,AX
   114 00000086 8E C0                           		MOV		ES,AX
   115 00000088 E8 [00000000]                   		CALL	_inthandler21
   116 0000008D 58                              		POP		EAX
   117 0000008E 61                              		POPAD
   118 0000008F 1F                              		POP		DS
   119 00000090 07                              		POP		ES
   120 00000091 CF                              		IRETD
   121 00000092                                 
   122 00000092                                 _asm_inthandler2c:
   123 00000092 06                              		PUSH	ES
   124 00000093 1E                              		PUSH	DS
   125 00000094 60                              		PUSHAD
   126 00000095 89 E0                           		MOV		EAX,ESP
   127 00000097 50                              		PUSH	EAX
   128 00000098 66 8C D0                        		MOV		AX,SS
   129 0000009B 8E D8                           		MOV		DS,AX
   130 0000009D 8E C0                           		MOV		ES,AX
   131 0000009F E8 [00000000]                   		CALL	_inthandler2c
   132 000000A4 58                              		POP		EAX
   133 000000A5 61                              		POPAD
   134 000000A6 1F                              		POP		DS
   135 000000A7 07                              		POP		ES
   136 000000A8 CF                              		IRETD
   137 000000A9                                 
   138 000000A9                                 _memtest_sub:	;unsigned int memtest_sub(unsigned int start, unsigned int end);
   139 000000A9 57                              		PUSH	EDI		; (EBX, ESI, EDI 도 사용하고 싶기 때문에)
   140 000000AA 56                              		PUSH	ESI
   141 000000AB 53                              		PUSH	EBX
   142 000000AC BE AA55AA55                     		MOV		ESI, 0xaa55aa55				; pat0 = 0xaa55aa55;
   143 000000B1 BF 55AA55AA                     		MOV		EDI, 0x55aa55aa				; pat1 = 0x55aa55aa;
   144 000000B6 8B 44 24 10                     		MOV		EAX, [ESP + 12 + 4]			; i = start;
   145 000000BA                                 mts_loop:
   146 000000BA 89 C3                           		MOV		EBX, EAX
   147 000000BC 81 C3 00000FFC                  		ADD		EBX, 0xffc					; p = i + 0xffc;
   148 000000C2 8B 13                           		MOV		EDX, [EBX]					; old = *p;
   149 000000C4 89 33                           		MOV		[EBX], ESI					; *p = pat0;
   150 000000C6 83 33 FF                        		XOR		DWORD [EBX], 0xffffffff		; *p ^= 0xffffffff;
   151 000000C9 3B 3B                           		CMP		EDI, [EBX]					; if (*p != pat1) goto fin;
   152 000000CB 75 18                           		JNE		mts_fin
   153 000000CD 83 33 FF                        		XOR		DWORD [EBX], 0xffffffff		; *p ^= 0xffffffff;
   154 000000D0 3B 33                           		CMP		ESI, [EBX]					; if (*p != pat0) goto fin;
   155 000000D2 75 11                           		JNE		mts_fin
   156 000000D4 89 13                           		MOV		[EBX], EDX					; *p = old;
   157 000000D6 05 00001000                     		ADD		EAX, 0x1000					; i += 0x1000;
   158 000000DB 3B 44 24 14                     		CMP		EAX, [ESP + 12 + 8]			; if (i <= end) goto mts_loop;
   159 000000DF 76 D9                           		JBE		mts_loop
   160 000000E1 5B                              		POP		EBX
   161 000000E2 5E                              		POP		ESI
   162 000000E3 5F                              		POP		EDI
   163 000000E4 C3                              		RET
   164 000000E5                                 mts_fin:
   165 000000E5 89 13                           		MOV		[EBX], EDX					; *p = old;
   166 000000E7 5B                              		POP		EBX
   167 000000E8 5E                              		POP		ESI
   168 000000E9 5F                              		POP		EDI
   169 000000EA C3                              		RET